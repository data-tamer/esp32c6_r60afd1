#include <WiFi.h>
#include <WiFiManager.h>  // WiFiManager for WiFi handling
#include <PubSubClient.h>

// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡πÑ‡∏ó‡∏õ‡πå‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
void getUserInput();
void sendMQTTData();

// WiFiManager Configurations
#define WIFI_RESET_PIN 0  // GPIO for WiFi reset button
WiFiManager wm;

// WiFi ‡πÅ‡∏•‡∏∞ MQTT Configurations
const char* mqtt_server = "192.168.1.67";
const int mqtt_port = 1883;
const char* mqtt_user = "raspi5nr";
const char* mqtt_password = "12345";
const char* topic = "Fulldetector";

WiFiClient espClient;
PubSubClient client(espClient);

// Sensor Configurations
#define TX_PIN 17
#define RX_PIN 16
HardwareSerial mySerial(1);

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå R60AFD1
int presenceDetected = 1;
int motionDetected = 0; // 0: ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß, 1: ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥, 2: ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á
int activityLevel = 1;
int fallDetected = 0;
int stationaryState = 0; // 0: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á, 1: ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á
float heightPercentage[4] = {0}; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
int fallSensitivity = 0; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏° (0-3)
int fallTime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏° (5-180 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
int residenceTime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á (60-3600 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
int residenceSwitch = 0; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á (0: ‡∏õ‡∏¥‡∏î, 1: ‡πÄ‡∏õ‡∏¥‡∏î)
int heightAccumulationTime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (0-300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

// ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
unsigned long last_update = 0;
const unsigned long update_interval = 5000;

std::vector<uint8_t> bytes;

// Function to setup WiFi using WiFiManager
void setupWiFiManager() {
  pinMode(WIFI_RESET_PIN, INPUT_PULLUP);
  if (digitalRead(WIFI_RESET_PIN) == LOW) {
    Serial.println("Wi-Fi reset button pressed. Resetting WiFi settings...");
    wm.resetSettings(); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Wi-Fi
    delay(1000); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
  }

  // Check if we have a saved Wi-Fi configuration
  if (!wm.autoConnect("Fulldetec")) {
    Serial.println("Failed to connect to WiFi. Starting AP mode...");
    wm.startConfigPortal("Fulldetector");
  }

  Serial.println("WiFi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

// Function to setup MQTT client
void setupMQTT() {
  client.setServer(mqtt_server, mqtt_port);
}

// Function to reconnect MQTT
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" trying again in 5 seconds");
      delay(5000);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì checksum
uint8_t calculateChecksum(uint8_t* data, int length) {
  uint8_t checksum = 0;
  for (int i = 0; i < length; i++) {
    checksum += data[i];
  }
  return checksum;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Height Percentage
void queryHeightPercentage() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x8E, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Height Percentage...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Stationary Residence State
void queryStationaryState() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x85, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Stationary Residence State...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Fall Status
void queryFallStatus() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x81, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Fall Status...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Fall Time
void queryFallTime() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x8C, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Fall Time...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Residence Time
void queryResidenceTime() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x8A, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Residence Time...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Residence Switch
void queryResidenceSwitch() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x8B, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Residence Switch...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Fall Sensitivity
void queryFallSensitivity() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x8D, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Fall Sensitivity...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Height Accumulation Time
void queryHeightAccumulationTime() {
    uint8_t command[10] = {0x53, 0x59, 0x83, 0x8F, 0x00, 0x01, 0x0F, 0x00, 0x54, 0x43};
    command[7] = calculateChecksum(command, 7);
    mySerial.write(command, sizeof(command));
    Serial.println("üì° Querying Height Accumulation Time...");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
void processPacket() {
  if (bytes.size() < 7) return;

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏°‡∏≤
  Serial.println("Raw Data from Sensor:");
  for (size_t i = 0; i < bytes.size(); i++) {
    Serial.printf("%02X ", bytes[i]);
  }
  Serial.println();

  if (bytes[0] == 0x53 && bytes[1] == 0x59) {
    switch (bytes[2]) {
      case 0x80: // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        switch (bytes[3]) {
          case 0x01: // presenceDetected
            presenceDetected = bytes[6];
            break;
          case 0x02: // motionDetected
            motionDetected = bytes[6]; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ motionDetected
            Serial.print("Updated Motion Detected: ");
            Serial.println(motionDetected); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡πà‡∏≤ motionDetected ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            break;
          case 0x03: // activityLevel
            activityLevel = bytes[6];
            fallDetected = (activityLevel >= 85) ? 1 : 0; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fallDetected
            break;
        }
        break;
      case 0x83: // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        if (bytes[3] == 0x85) { // Query Stationary Residence State
          stationaryState = bytes[6]; // 0x00: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á, 0x01: ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡πà‡∏á
          Serial.print("Stationary Residence State: ");
          Serial.println(stationaryState ? "Occupied" : "Unoccupied");
        }
        if (bytes[3] == 0x8E) { // Query Height Percentage
          heightPercentage[0] = bytes[6] * 0.01; // 0-0.5m
          heightPercentage[1] = bytes[7] * 0.01; // 0.5-1m
          heightPercentage[2] = bytes[8] * 0.01; // 1-1.5m
          heightPercentage[3] = bytes[9] * 0.01; // 1.5-2m

          // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á heightPercentage[]
          Serial.print("Height Percentages: ");
          for (int i = 0; i < 4; i++) {
            Serial.print(heightPercentage[i], 2); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏∂‡∏á 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
            Serial.print(" ");
          }
          Serial.println();
        }
        break;
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á MQTT
void sendMQTTData() {
  char payload[512];
  snprintf(payload, sizeof(payload),
           "{ \"device_id\": \"Fulldetector2\", \"device_type\": \"R60AFD1\", \"presence\": %d, \"motion\": %d, \"activity_level\": %d, \"fall_detected\": %d, \"stationary_state\": %d,  \"height0\": %.2f,  \"height1\": %.2f,  \"height2\": %.2f,  \"height3\": %.2f}",
           presenceDetected, motionDetected, activityLevel, fallDetected, stationaryState, 
           heightPercentage[0], heightPercentage[1], heightPercentage[2], heightPercentage[3]);

  if (client.publish(topic, payload)) {
    Serial.println("Message sent successfully:");
    Serial.println(payload);  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
  } else {
    Serial.println("Message failed to send");
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
void getUserInput() {
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå R60AFD1:");

  // Fall Monitoring Function Switch
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Fall Monitoring Function Switch ‡πÄ‡∏õ‡∏¥‡∏î (1) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏¥‡∏î (0):");
  while (!Serial.available()) {}
  fallDetected = Serial.parseInt();
  Serial.print("Fall Monitoring Function Switch ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ");
  Serial.println(fallDetected);

  // Fall Sensitivity
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Fall Sensitivity (0-3):");
  while (!Serial.available()) {}
  fallSensitivity = Serial.parseInt();
  Serial.print("Fall Sensitivity ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ");
  Serial.println(fallSensitivity);

  // Fall Time
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Fall Time (5-180 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):");
  while (!Serial.available()) {}
  fallTime = Serial.parseInt();
  Serial.print("Fall Time ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ");
  Serial.println(fallTime);

  // Residence Time
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Residence Time (60-3600 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):");
  while (!Serial.available()) {}
  residenceTime = Serial.parseInt();
  Serial.print("Residence Time ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ");
  Serial.println(residenceTime);

  // Residence Switch
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Residence Switch ‡πÄ‡∏õ‡∏¥‡∏î (1) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏¥‡∏î (0):");
  while (!Serial.available()) {}
  residenceSwitch = Serial.parseInt();
  Serial.print("Residence Switch ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ");
  Serial.println(residenceSwitch);

  // Height Accumulation Time
  Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Height Accumulation Time (0-300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):");
  while (!Serial.available()) {}
  heightAccumulationTime = Serial.parseInt();
  Serial.print("Height Accumulation Time ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ");
  Serial.println(heightAccumulationTime);

  Serial.println("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  // Setup WiFi Manager
  setupWiFiManager();

  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  getUserInput();

  // Setup MQTT
  setupMQTT();

  // Initialize sensor UART
  mySerial.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);
  Serial.println("R60AFD1 Sensor Initialized");
}

void loop() {
  static uint8_t buffer[128];
  static int index = 0;

  // Ensure MQTT is connected
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Height Percentage ‡πÅ‡∏•‡∏∞ Query Stationary State ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  static unsigned long lastQueryTime = 0;
  if (millis() - lastQueryTime > 10000) {
    queryFallStatus(); // Query fall status
    queryFallTime(); // Query fall time
    queryResidenceTime(); // Query residence time
    queryResidenceSwitch(); // Query residence switch
    queryFallSensitivity(); // Query fall sensitivity
    queryHeightPercentage(); // Query height percentage
    queryStationaryState(); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Query Stationary Residence State
    queryHeightAccumulationTime(); // Query height accumulation time
    lastQueryTime = millis();
  }

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
  while (mySerial.available()) {
    buffer[index++] = mySerial.read();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡πâ‡∏≤‡∏¢ (Frame Tail: 0x54 0x43)
    if (index >= 7 && buffer[index - 2] == 0x54 && buffer[index - 1] == 0x43) {
      bytes.assign(buffer, buffer + index);  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ bytes
      processPacket();  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à
      index = 0;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÉ‡∏´‡∏°‡πà
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô Serial Monitor
  Serial.print("Motion Detected: ");
  Serial.println(motionDetected);
  Serial.print("Fall Detected: ");
  Serial.println(fallDetected);
  Serial.print("Stationary Residence State: ");
  Serial.println(stationaryState ? "No stationary residency" : "stationary residency");

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô MQTT
  sendMQTTData();

  delay(5000); // Publish every 5 seconds
}